<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">


   
   <!-- 사용자 페이지 리스트 조회 -->
   <!-- pageVo : int page, int pageSize -->
<!--    <select id="memPagingList" resultType="memberVo" parameterType="pageVo"> -->
<!--       SELECT * -->
<!--       FROM(SELECT a.*, rownum rn -->
<!--            FROM (SELECT a.* -->
<!--                  FROM   USERS a -->
<!--                  ORDER BY USERID) a ) -->
<!--            WHERE rn &gt;= 1 and rn &lt;= 10 -->
           
<!--       <![CDATA[ -->
<!--       SELECT c.* -->
<!--       FROM(SELECT b.*, ROWNUM rn -->
<!--            FROM (SELECT a.* -->
<!--                  FROM   MEMBER a -->
<!--                  ORDER BY MEM_ID) b ) c -->
<!--       WHERE rn >= (#{page} - 1) * #{pageSize} + 1 and rn <= #{page} * #{pageSize} -->
<!--       ]]> -->
<!--    </select> -->
   

   
   <!-- 일반회원 등록 -->
   <insert id="insertMember" parameterType="memberVo">
      INSERT INTO MEMBER(mem_id
      					,mem_nm
      					,mem_birth
      					,mem_gender
      					,mem_pass
      					,mem_phone
      					,mem_add1
      					,mem_add2
      					,mem_zipcd
      					,mem_mail
      					,mem_grade
      					,mem_del
      					,mem_photo_path
      					,mem_photo_nm
      					,pro_relation
      					,pro_nm
      					,pro_phone)
     			 VALUES (#{mem_id}
     			 		,#{mem_nm}
     			 		,#{mem_birth}
     			 		,#{mem_gender}
     			 		,#{mem_pass}
     			 		,#{mem_phone}
     			 		,#{mem_add1}
     			 		,#{mem_add2}
     			 		,#{mem_zipcd}
     			 		,#{mem_mail}
     			 		,'1'
     			 		,'N'
     			 		,#{path, jdbcType=VARCHAR}
     			 		,#{filename, jdbcType=VARCHAR}
     			 		,#{pro_relation}
     			 		,#{pro_nm}
     			 		,#{pro_phone})
   </insert>
  
   <!-- 일반회원 등록 - 질병명 -->
   <insert id="insertMemberDisease" parameterType="memberDiseaseVo">
   		INSERT INTO MEMBERDISEASE(dis_id)
   					VALUES(#{dis_id})
   </insert>
   
   
   <!-- 요양보호사 등록 -->
   <insert id="insertCWMember" parameterType="memberVo">
      INSERT INTO MEMBER(mem_id
      					,mem_nm
      					,mem_birth
      					,mem_gender
      					,mem_pass
      					,mem_phone
      					,mem_mail
      					,mem_grade
      					,mem_del
      					,mem_photo_path
      					,mem_photo_nm
      					,cw_driver
      					,cw_lic)
     			 VALUES (#{mem_id}
     			 		,#{mem_nm}
     			 		,#{mem_birth}
     			 		,#{mem_gender}
     			 		,#{mem_pass}
     			 		,#{mem_phone}
     			 		,#{mem_mail}
     			 		,'3'
     			 		,'N'
     			 		,#{path, jdbcType=VARCHAR}
     			 		,#{filename, jdbcType=VARCHAR}
     			 		,#{cw_driver}
     			 		,#{cw_lic})
   </insert>
   
   <!-- 요양보호사 등록 - 서비스 지역-->
   <insert id="insertLocation" parameterType="locationVo">
   		INSERT INTO LOCATION(loc_dong)
   					VALUES(#{loc_dong})
   </insert>
   
   <!-- 요양보호사 등록 - 가능요일-->
   <insert id="insertDay" parameterMap="dayVo">
   		INSERT INTO DAY(cw_day)
   					VALUES(#{cw_day})
   </insert>
   
   <!-- 요양보호사 등록 - 경력 -->
   <insert id="insertCareer" parameterType="careerVo">
   		INSERT INTO CAREER(career_cont
   						  ,career_st_dt
   						  ,career_end_dt)
   					VALUES(#{career_cont}
   						  ,#{career_st_dt}
   						  ,#{career_end_dt})
   </insert>
   
   <!-- 요양보호사 등록 - 경력 - 병원명 -->
   <insert id="insertHospital" parameterType="hospitalVo">
   		INSERT INTO HOSPITAL(hos_nm)
   					VALUES(#{hos_nm})
   </insert>	
   
   <!-- 요양보호사 증록 - 서비스 종류 -->
   <insert id="insertServiceType" parameterType="serviceTypeVo">
   		INSERT INTO SERVICETYPE(ser_type)
   					VALUES(#{ser_type})
   </insert>
   
   <!-- 아이디중복체크 -->
   <select id="idCheck" resultType="memberVo">
   		SELECT mem_id FROM member
   		where mem_id = #{mem_id}
   </select>
   
   
   
   <!-- 사용자 정보 수정 -->
  <!--  <update id="updateMem" parameterType="userVo">
      UPDATE USERS
      SET    NAME = #{name},
             ALIAS = #{alias},
             PASS = #{pass},
             ADDR1 = #{addr1},
             ADDR2 = #{addr2},
             ZIPCD = #{zipcd},
             BIRTH = #{birth},
             <if test="path != null">
                ,path=#{path}, filename=#{filename}
             </if>
             PATH = #{path, jdbcType=VARCHAR},
             FILENAME = #{filename, jdbcType=VARCHAR}
      WHERE  USERID = #{userId}
   </update> -->
   
   <!-- 사용자 비밀번호 암호화 적용 대상 조회 -->
   <!-- <select id="userListForPassEncrypt" resultType="userVo">
      SELECT *
      FROM   USERS
      WHERE  USERID NOT IN ('BROWN', 'USERTEST')
   </select> -->
   
   <!-- 사용자 비밀번호 업데이트 -->
 <!--   <update id="updateUserEncryptPass" parameterType="userVo">
      UPDATE USERS
      SET      PASS = #{pass}
      WHERE  USERID = #{userId}
   </update> -->
   
   
   
   
   

	<!-- 전체 사용자 리스트 조회 하기 -->
	<select id="getMemList" resultType="memberVo">
		SELECT *
		FROM MEMBER
		ORDER BY mem_id
	</select>

	<!-- 특정 사용자 조회 -->
	<select id="getMemVo" resultType="memberVo"
		parameterType="String">
		SELECT *
		FROM MEMBER
		WHERE mem_id = #{mem_id}
	</select>

	<!-- 전체 사용자 수 조회 -->
	<select id="memberCnt" resultType="int">
		SELECT /*+ INDEX_FFS(MEMBER PK_MEMBER)*/ COUNT(*)
		FROM MEMBER
	</select>


	<!-- 사용자 등록 -->
	<!-- <insert id="insertMem" parameterType="userVo"> INSERT INTO MEMBER VALUES 
		(#{userId}, #{name}, #{alias}, #{pass}, #{addr1}, #{addr2}, #{zipcd}, #{birth}, 
		#{path, jdbcType=VARCHAR}, #{filename, jdbcType=VARCHAR}) </insert> -->

	<!-- 사용자 삭제 -->
	<delete id="deleteMem" parameterType="String">
		UPDATE MEMBER
		set mem_del = 'Y'
		WHERE mem_id=#{mem_id}
	</delete>
	

	<update id="updateMem" parameterType="memberVo">
		UPDATE member
		SET
		mem_pass = #{mem_pass},
		mem_phone = #{mem_phone},
		mem_add1 = #{mem_add1},
		mem_add2 = #{mem_add2},
		mem_mail = #{mem_mail},
		mem_photo_path = #{mem_photo_path},
		mem_photo_nm = #{mem_photo_nm}
		WHERE mem_id = #{mem_id}
	</update>



   	<update id="updatePMem" parameterType="memberVo">
		UPDATE member
		SET
		mem_pass = #{mem_pass},
		mem_phone = #{mem_phone},
		mem_add1 = #{mem_add1},
		mem_add2 = #{mem_add2},
		mem_mail = #{mem_mail},
		mem_photo_path = #{mem_photo_path},
		mem_photo_nm = #{mem_photo_nm},
		pro_relation = #{pro_relation},
		pro_nm = #{pro_nm},
		pro_phone = #{pro_phone}
		WHERE mem_id = #{mem_id}
	</update>


	<!-- 사용자 비밀번호 암호화 적용 대상 조회 -->
	<!-- <select id="userListForPassEncrypt" resultType="userVo"> SELECT * FROM 
		USERS WHERE USERID NOT IN ('BROWN', 'USERTEST') </select> -->

	<!-- 사용자 비밀번호 업데이트 -->
	<!-- <update id="updateUserEncryptPass" parameterType="userVo"> UPDATE USERS 
		SET PASS = #{pass} WHERE USERID = #{userId} </update> -->


</mapper>